# Java Basics

# Comments
Comments are lines of code that are ignored intentionally. They are a great way to make notes for yourself and people reading your code.
There are two types of comments in Javascript
1. // this is an inline comment
2. /**/ this is a multi-line comment
Good commenting can help communicate the intent of your code, both for others and your future self.

# Variables
One of the most fundamental characteristics of a programmining language is the type of data it supports. These are the type of values that can be manipulated 
and represented in a programmining language.
Javascript allows you to work with primitive data types
1. Numbers e.g. 123, 120.50, etc.
2. Strings of text e.g. "This is a string".
3. Boolean e.g. true or false.
Javascript also defines two trivial data types: Null and Undefined.
JavaScript supports a composit data type known as an Object.
JavaScript does not make a distinction between Integers and Floating-point values. All members in JavaScript are represented as floating-point values.
Variables allow computers to store and manipulate data in a dynamic fashion. They do this by using a "label" to point to the data rather than using the data itself.
Any of the 8 data types may be stored in a variable 
Variables in JavaScript are declared using the "Var" keyword and you can declare multiple variables using this keyword.
1. Single declaration e.g  var name;
2. multiple declaration e.g. var name, money;
Storing a value in a variable is called "Variable Initialization". You can initialize a variable at the time of creation or at anytime when you need to use the variable
Use the "Var" keyword only for declaratin or initialization. You should not declare the same variable twice.
JavaScript is an untyped language. This means it can hold a value of any data type. The value type of a variable can change during execution of the program 
and Javascript takes care of it automatically.

# Strings
A string is a sequence of characters that may consist of letters, numbers, or synmbols. String in JS are primitive data times and immutable.
As Strings are the way we display and work with text and text is our main way of communicating and understanding through computers, Strings are
one of the most fundamental concepts of programming to be familiar with.

 Creating and viewing the output of strings 
In JS, there are 3 ways of writing strings. They can be single quotes(''), They can be double quotes ("") or backticks(''). the type used must match on both sides
however it is possible that all 3 styles be used in the same script.
Strings using double quotes  and single quotes are effectively the same, there is no convention or official preference for single or double
quoted strings. keeping consistent with project program files is all that matters 
  e.g. 'This uses single quotes'
  e.g. "This uses double quotes"

#Functions
A funtion is a group of reusable code which can be called anywhere in your program.This eliminates the need of writing the same code again and again
Functions allow a programmer to divide a program into a small number of manageable functions
JS supports all the necessary features to wwrite modular code using functions. Functions such as alert() and write() have been written in core JS.
JS allows us to write our own functions as well.

  Funtion Definition
The most common way to define a function in JS is by using the function keyword, followed by a unique name, a list of parameters, and a statement block surrounded by curly braces
  Syntax
function functionName(parameter-list){
  //statements
}
# Booleans
Booleans are values that can be only one of two things: True or False
Anything "On" or "Off", "Yes" or "No" or temporary is a usually good fit for a boolean. It's useful to store booleans in variables to keep
track of their values and change them over time.

# Type Conversion
Most of the time, operators and functions automatically convert the values given to them to the right time e.g. alert automatically  converts any
value to a string to show it. Mathematical operations convert values to numbers. There are also cases when we need to explicitly convert a value to
the expected type.

# String Conversion
String Conversion happens when we need the string form of a value. 
e.g. alert(value) does it to show the value
We can also call the string(value) function to convert a value to a string 
e.g. value = string(value)

# Numeric Conversion
Numeric conversion happens in mathematical funtiopns and expressions automatically
e.g. alert("6"/"2"); //3  Strings are converted to numbers
We can use the number(value) functionto explicitly convert a value to a number
e.g. let num = number(str)
Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered
If a string is not a valid number, the result of such a conversionis NaN
e.g. let age = number("an Arbitrary string instead of a number");
alert(age);
  Numeric conversion rules:
Value                  Becomes
-Undefined             NaN
-Null                  0
-True or False         1 and 0
-String                white space removed

# Boolean Conversion
It happens in logical operations, but can also be perfomed explicitly with a call to boolean(value)
The converion rule: 
  >Values that are intuitively "empty" like 0, an empty string, null, undefined and Nan become false
  Other values become true

# Formatting numbers
JS number format: main tips
> Several JS number format methods are offered with this language that you can use to manipulate numeric values.
> Each number method returns a new value instead of changing the one being used for the method.
> Every JS number format method may be used on any type of number including literals, variables, expressions.
 ->These are the go-to methods while working with numeric values:
  >number(); Return number converted from its argument
  >parseFloat(); Parse its argument and return a float
  >parseInt(); Parse its argument and return an integer
  >toString(); Return number as string
  >toExponential(); Return string with numberrounded and written with exponential notations.
  >toFixed(); Return string with rounded and written using a specified number of decimals
  >toPrecision(); Return string with a number written with a specified length.
  >valueOf(); Return number as a number

# The Document Object Model and JavaScript Syntax
The Document Object Model is an Application Programming Interface(API) for HTML and XML documents. it does two things for web developers
 > Provides a structural representation of the document.
 > Defines the way that the structure is to be accessed from script
The JS syntax has to do with objects, to access an object, property or method.
its reference must include every object that contains it, separated by a dot. This is called the "dot syntax"

-> Object
  > A JS Object is any scriptable HTML element, that is, any HTML element within a document that may be accessed through the JS language.
  > Outside the context of a web page are core ojects. These objects are not associated with HTML elements, but with the language itself
    then there are home made objects. core objects and home made objects are both associated with the JS object model.
  > The following are some of the JS Objects:
    - window
    - document
    - form
    - image
-> Property
 > Objects have properties, which you can think of as characteristics of an object. 
   A JS property has a similar relationship to the object it belogs to that an HTML tag attribute has to the tag that it contains it.
 > There is one major exception: JS properties can also be objects. the object-property relationship is more like the relationship an <option>
    tag has to the <select> tagthat contains it, but in JS, Theres is no difference in how you prefer to a plain old property and a 
    property that is also an object.
 > A document, although contained by the window and therefore a property of the window object, is also considered an object. The same is true for a form and
   an image, they are properties of the document object but also properties themselves. The rule for the dual properties is this: a property is also an object
   if that property has its own properties and methods. it is best to think of objects with properties as objects.
 
-> Method 
 > Methods are actions that can be applied directly to objects. methods cause a boring old HTML document to react to the end-user. This results in a 
   meaningful experience for the end-user otherwise would be completely one-sided.
-> Method parameters 
 > Methods are signified by parenthesis immediately following their name e.g. alert(); These parenthesis sometimes hold values called parameters, which are 
   required by some methods.
 > A parameter is simply information needed by a method to perform its task. for instance, the alert() method pops up an alert box without a parameter, the 
   alert method will generate a dialog box alert(), which is meaningless. But with a parameter, the alert method will generate a dialog box alert("Hello World")
   which communicates a massasge to the end user.
 -> Here are a few Javascript methods
    - alert() causes an alert dialog box to appear over the pages that launched it.
    - write() writes content to a page
    - focus() causes the mouse cursor to be inserted into a form element

 # Core APIs in the DOM 
   > Document and Window objects are the objects whhose interfaces you generally use most often in DOM programming. The window object represents something like
    the browser and the document object is the root of the document itself. Elements inherits from the generic node interface and together these two interface
    provide many of the methods and properties you use on individual elements.
  > The following is a brief list of common APIs in web and XML page scripting using the DOM
    - document.getElementById(id)
    - document.getElementsByTagName(name)
    - document.createElement(name)
    - parentNode.appendChild(node)
    - element.innerHTML
    - element.style.left
    - element.setAttribute
    - element.getAttribute
    - element.addEventListner
    - window._content
    - window.onload
    - window.dump()
    - window.scrollTo()

 # Functions
   > A Funtion is a subprogram designed to perform a particular task. A function will only execute if and only when it has been called. Values can be passed
     into functions and used within that function as well. All funtions have a return value, otherwise they become undefined. A function is an object(HTML element
     with properties and methods)
  > A function declaration is as follows
       function name(parameters){//statements}

 -> Calling one function from another function
   > Code inside a function behaves just like anywhere else. This means you can call one function from inside another function, this allows you to nest functions
     so that you can create separate functions, which each perform a specific task, and then run them together as a complete process.
 
 -> Creating objects with user-defined functions
   > Javascript is based on objects: the window is an object, links are objects, forms are objects, even Netscape itself is an object. Using objects can help
     make programming easier and more streamlined. You can extend the use of objects in Javascript by making your own. the process uses functions in a slightly modified
     way.

 -> Making a new object entails two steps: 
   > Define the object in a user-defined function
   > Use the new keyword to create(or instantiate) the object with a call to the object function.
     e.g. ret = new makeSimpleObject();
          function makeSimpleObject(){}

 -> Defining new properties to already-made objects
   > After an object has been created you can assign a value to it, but instead of just assigning a value to the object itself, you should define a new property 
     for the object, and assign a value to the property. To create a new property and assign a value to it, simply wite a variable expression like this:
     e.g. myObject.property = value
   > myObject is the name of the user-defined object
   > property is the name of the property you want to create
   > Value is the value you want to assign.

 -> Defining properties when you create the object
   > Another method of defining properties for objects is to include the property names in the object function. You can use this technique to simultaneously 
     create a new object and define the property values
     e.g. customer = new makeCustomer("Fred", "123 main street", "555-1212");
          alert(customer.name);
          
          function makeCustomer(name, address, phone){
          this.name = name;
          this.address = address;
          this.phone = phone;
        }
   -> Each this statement assigns a property to the current object, which is the one being created in the makeCustomer object function. Three parameters are
      passed to the object statement: the customer's name, address, and phone number. These parameters are used to define the contents of the three properties.
   -> Javascript imposes no limitations on the number of properties you can assign to an object. To include as customer object, jut do this:
      e.g. customer = new makeCustomer("Fred", "123 main street", "555-1212")
          customer.salutation = "Mr. ";

   -> Note that other objects you create with the makeCustomer object function will have just these three base properties but this object for Fred will have
      an additional property for the salutation. properties added later do not affect other objects created with the same object function.

  -> Operators
   > JS has the following types of operators, this section describes the operators and contains information about operator precedence
     - Assignment Operators
     - Comparison Operators
     - Arithmatic Operators
     - Bitwise Operators
     - Logical Operators
     - String Operators
     - Conditional(ternary) Operators
     - Comma Operators
     - Unary Operators
     - Relational Operators

  > JS has both binary and unary operators and one special ternary operator, the Conditional operator. 
    > A binary operator require two operands, one before the operator and one after the operator.
      e.g. operand1 + operand2
           3 + 4 or x*y
    > A Unary operator requires a single operand, either before or after the operator:
      e.g. operator operand or operand operator

 -> Assignment Operator
  > Return value and chaining
   - Like most expressions, assignments like x=y have a return value, it can be retrieved by e.g. assigning the expression or logging it to the console.
   - An Assignment operator assigns a value to its left operand based on the value of its right operand. that is x=y assigns the value of y to x.
   - There are also compound assignment operators that are shorthand for the operations listed in the following table.

 -> Compound Assignment Operator
   - const z = (x=y); //or equivalent; const z = x = y
   - console.log(z); // log the return value of the assignment x=y
   - console.log(x=y); // or log the return value directly
   > The return value matches the expression to the right of the "=" sign in the "meaning" column of the table above. that means that (x=y) returns y,
     (x += y) returns the resulting sum x+y, (x**=y) returns the resulting power x**y, and so on.
   > In the case of logical assignments, (x&&=y), (x||=y) and (x??=y), the return value is that of the logical operation without the assignment so x&&y, x||y and x??y.
   > The return values are always based on the operands values before operation.
   > When chaining these expressions, each assignment is evaluated right-to-left.
    - e.g. w=z=x=y is equal to w = (z = (x =)) or x=y; z=y; w=y
    - e.g. z += x*=y is equivalent to z+=(x*=y) or tmp = x*y; x*=y; z+=tmp (except without the tmp)

-> Destructuring
 > The destructuring assignment syntax is a JS expression that makes it possible to extract data from
    arrays or objects using a syntax that mirrors the construction of array and object literals.
    e.g. var foo = ['one', 'two', 'three']
    // without destructuring
    var one = foo[0];
    var two = foo[1];
    var three = foo[2];
   // with destructuring
    var [one, two, three] = foo;

-> Comparison Operators
 > A comparison operator compares its operands and returns a logical value based on whether the
   comparison is true. The operands can be numerical, string, logical, or object values. Strings are 
   compared based on standard lexicographical ordering, using unicode values. 
   If the two operands are not the same data types, JS attempts to convert them to appropriate types
   for comparison. This behavior generally results in comparing the operands numerically. The sole
   exceptions to type conversion within comparisons include "===" and "!==" operators, which perform
   strict equality and inequality comparisons. These operators do not attempt to convert the operands
   to compatible types before checking equality.

-> Arithmetic Operators
 > An arithmetic operator takes numerical values(either literals or variables) as their operands
   and returns a single numerical value.
 > The standard arithmetic operators are addition(+), subtraction(-), multiplication(*) and division(/).
 > These  operators work as they do in most other programming languages when used with floating point numbers.

-> Bitwise Operators
 > a bitwise operator treats their operands as a set of 32 bits (zeros and ones), rather than decimal, hexadecimal,
   or octal numbers. Bitwise operators perfom their operations on such binary representation, but the return standard
   JS numerical values

-> Bitwise Logical Operators
 > The operands are converted to 32bit intergers and expressed by a series of zeros and ones(bits).numbers with
   more than 32bits get most of their significant bits discarded.
   e.g. var x = [0,1,2,3,4,5,6,7,8,9];
        var a = [x,x,x,x,x];
      for (var i=0, j=9; i<=j; i++, j--);
      console.log('a[' + i + '][' + j + ']= ' + a[i][j]);
 > Each bit in the first operand is paired with the corresponding bit in the second operand
 > The operator is applied to each pair of bits, and the results is constructed bitwise.

-> Bitwise Shift Operators
 > Nitwise shift operators take two operands: the first is a quantity to be shifted and the second
   specifies the number of bits positions by which the first operand is to be shifted. the direction
   of the operation is controlled by the operator used.
 > Shift operators convert their operands to 32-bit integers and return a result of the same type as
   the left operand.

-> Logical Operators
 > Logical operators are typically used with boolean values: When they are, they return a boolean value
   However, the && and || operators return the value of one of the specified operands, so if these
   operators are used with non-boolean values, the may return a non-boolean value.
 > Examples of expressions that can be converted to false are those that evaluate to null, 0, NaN, empty 
   string, or undefined.

-> Short-circuit evaluation
 > As logical expressions are evaluated left-to-right, they are tested for possible "short-circuit" evaluation using the following rules:
  - false&&anything is short-circuit evaluated to false
  - true||anything is short-circuit evaluated to true
 > The rules of logic guarantee that these evaluations are always correct. Note that the anything is not evaluated
   so any side effects of doing so do not take effect.
 > In mordern code you can use the new nullish coalescing operator(??) that works like ||, but it only returns the seconds
   expression, when the first one is "nullish", i,e null or undefined. it is a better alternative
   to provide defaults when values like '' or 0 are valid for the first expression, too.

-> String Operators
 > In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates
   two string values together, returning another string that is the union of the two operand strings.
 > The Shorthand assignment operator += can also be used to concatenate strings.

-> Conditional(ternary) Operator
 > The Conditional operator is the only JS operator that takes three operands. The operator can have one of two values 
   based on a condition. The syntax is:
    e.g. condition ? val1: val2
 > if condition is true, the operator has the value of val1. otherwise it has the value of val2.
   you can use the conditional operator anywhere you would use a standard operator.

-> Comma Operator
 > The comma operator evaluates both of its operands and returns the value of the last operand. 
   This operator is primarily used inside a for loop, to allow multiple variables to be updated each time through the loop.
    it is regarded bad style to use it elsewhere, when it is not necessary. Often two separate statements can and should be used instead.
    e.g. var x = [0,1,2,3,4,5,6,7,8,9];
           var a = [x,x,x,x,x];
         for (var i=0, j=9; i<=j; i++, j--);
         console.log('a[' + i + '][' + j + ']= ' + a[i][j]);

-> Unary Operator
 > A Unary operation is an operation with only one operand
 > The Delete operator deletes an objects property. The syntax is:
   e.g. delete object.property;
        delete object[propertyKey]
        delete objectName[index];
        delete property;
 > Since arrays are just objects, its technically possible to delete elements from them. When you delete an array property, the array
   length is not affected and elements are not re-indexed. to achieve that behaviour, it is much better to just overwrite the element with
   the value undefined. To actually manipulate the array, use the various array methods such as splice.

-> TypeOf
 > The typeOf operator returns a string indicating the type of the unevaluated operand. operand is the string, variable, keyword or object for
   which the type is to be returned. the parentheses are optional

-> void
 > The void operator specifies an expression to be evaluated without returning a value. expression is a JS expression to evaluate
 > The parentheses surrounding the expression are optional, but it is good style to use them
   e.g. void (expression) or void expression.

-> Relational Operator
 > A relational operator compares its operand and returns a boolean value based on whether the comparison is true.
 > The in operator returns true if the specified property is in the specified object. the syntax is:
   e.g. propNameOrNumber in objectName
 > Where propNameOrNumber is a string, numeric, or symbol expression representing a property name or array index and objectName is the name of an object.

-> instanceOf
 > The instanceOf operator returns true if the specified object is of the specified object type. The syntax is:
   e.g. objectName instanceOf objectType
 > where objectName is the name of the object to compare to objectType, and the objectType is an object type such as date or array.
 > Use instanceOf when you need to confirm the type of an object at runtime.

-> Operator Precedence
 > The precedence of operators determines the order they are applied when evaluating an expression. You can override operator precedence by using parenthesis

-> Event Bubbling
 > The event starts at the element that triggered it, then, it bubbles up to each of its parent element until it reaches the document.
   Any listeners on any of those parent elements would get triggered as it bubbles up. causing all the events to occur on the page possibly slowing down your application.
 > e.g. forms, the event would bubble up to the parent form, then any containers or divs the form was in, then the body, then html element, then the document, then the window.

-> Event Delegation
 > Event delegation is a technique for listening to event where you delegate a parent element as the listner for all the events that happen inside it.
 > So instead of adding event listener to each button you would just add and event listener to the parent element and target the child element

-> Regular Expressions
 > A regular expression is a sequence of characters that forms a search pattern. 
 > The search pattern can be used for text search and text replace operations
 > A regular expressioncan be a single character, or a more complicated pattern.
 > Regular expressions can be used to perform all types of text search and text replace operations

# JS Methods and "this" keyword
 -> Accessing Object Methods
  > You can access an object method using a dot notation. the syntax is:
    e.g objectName.methodKey()
 > You can access a method by calling an objectName and a key for that method along with(). And you can access property only by
   calling an objectName and a key.

-> JS Built-in Methods
 > In IS, there are many built-in methods
  e.g. let number = '23.32'
       let result = parseInt(number)
       console.log(result); // 23

-> JS this keyword
 > To access a property of an object from within a method of the same object, you need to use the this keyword.
 > In order to access the properties of an object, this keyword is used following with .andkey
 > Note: In JS, this keyword when used with the objects method refere to the object. this is bound to an object
 > However, the function inside of an object can access it variable in a similar was as a normal function would.

# Day 3 - Javascript Forms
-> Switch Statements
 > The switch statement is used to perform different actions based on different conditions
 > Use the switch statement to select one of many code blocks to be executed
 > Syntax:   switch(expression){
                  case x:
                  // code block
                     break;
                  case y:
                  // code block
                     break;
                  default;
                  // code block  
 }
 > The switch expression is evaluated once.
 > The value of the expression is compared with the values of each case
 > If there is a match, the associated block of code is executed
 > If there is no match, the default code block is executed
 > The Break keyword
   - When JS reaches a break keyword, it breaks out of the switch block
   - This will stop the execution of inside the block
   - It is not necessary to break the last case in a switch block. the block breakes there anyway.
 > The Default keyword
   - The default keyword specifies the code to run if there is no case match:
   - If default is not the last case in the switch block, remember to end the default case with a break.
 > Common Code blocks
   - Sometimes you will want different switch cases to use the same code.
   - Switching Details
      If multiple cases matches a case value, the first case is selected.
      If no matching cases are found, the program continues to the default label
      if no default label is found, the program coninues to the statement(s) after the switch
 > Strict Comparison
   - Switch cases use strict comparison (===)
   - The values must be of the same type to match
   - A strict comparison can only be true if the operands are of the same type.
