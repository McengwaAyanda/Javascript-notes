# Java Basics

# Comments
Comments are lines of code that are ignored intentionally. They are a great way to make notes for yourself and people reading your code.
There are two types of comments in Javascript
1. // this is an inline comment
2. /**/ this is a multi-line comment
Good commenting can help communicate the intent of your code, both for others and your future self.

# Variables
One of the most fundamental characteristics of a programmining language is the type of data it supports. These are the type of values that can be manipulated 
and represented in a programmining language.
Javascript allows you to work with primitive data types
1. Numbers e.g. 123, 120.50, etc.
2. Strings of text e.g. "This is a string".
3. Boolean e.g. true or false.
Javascript also defines two trivial data types: Null and Undefined.
JavaScript supports a composit data type known as an Object.
JavaScript does not make a distinction between Integers and Floating-point values. All members in JavaScript are represented as floating-point values.
Variables allow computers to store and manipulate data in a dynamic fashion. They do this by using a "label" to point to the data rather than using the data itself.
Any of the 8 data types may be stored in a variable 
Variables in JavaScript are declared using the "Var" keyword and you can declare multiple variables using this keyword.
1. Single declaration e.g  var name;
2. multiple declaration e.g. var name, money;
Storing a value in a variable is called "Variable Initialization". You can initialize a variable at the time of creation or at anytime when you need to use the variable
Use the "Var" keyword only for declaratin or initialization. You should not declare the same variable twice.
JavaScript is an untyped language. This means it can hold a value of any data type. The value type of a variable can change during execution of the program 
and Javascript takes care of it automatically.

# Strings
A string is a sequence of characters that may consist of letters, numbers, or synmbols. String in JS are primitive data times and immutable.
As Strings are the way we display and work with text and text is our main way of communicating and understanding through computers, Strings are
one of the most fundamental concepts of programming to be familiar with.

 Creating and viewing the output of strings 
In JS, there are 3 ways of writing strings. They can be single quotes(''), They can be double quotes ("") or backticks(''). the type used must match on both sides
however it is possible that all 3 styles be used in the same script.
Strings using double quotes  and single quotes are effectively the same, there is no convention or official preference for single or double
quoted strings. keeping consistent with project program files is all that matters 
  e.g. 'This uses single quotes'
  e.g. "This uses double quotes"

#Functions
A funtion is a group of reusable code which can be called anywhere in your program.This eliminates the need of writing the same code again and again
Functions allow a programmer to divide a program into a small number of manageable functions
JS supports all the necessary features to wwrite modular code using functions. Functions such as alert() and write() have been written in core JS.
JS allows us to write our own functions as well.

  Funtion Definition
The most common way to define a function in JS is by using the function keyword, followed by a unique name, a list of parameters, and a statement block surrounded by curly braces
  Syntax
function functionName(parameter-list){
  //statements
}
# Booleans
Booleans are values that can be only one of two things: True or False
Anything "On" or "Off", "Yes" or "No" or temporary is a usually good fit for a boolean. It's useful to store booleans in variables to keep
track of their values and change them over time.

# Type Conversion
Most of the time, operators and functions automatically convert the values given to them to the right time e.g. alert automatically  converts any
value to a string to show it. Mathematical operations convert values to numbers. There are also cases when we need to explicitly convert a value to
the expected type.

# String Conversion
String Conversion happens when we need the string form of a value. 
e.g. alert(value) does it to show the value
We can also call the string(value) function to convert a value to a string 
e.g. value = string(value)

# Numeric Conversion
Numeric conversion happens in mathematical funtiopns and expressions automatically
e.g. alert("6"/"2"); //3  Strings are converted to numbers
We can use the number(value) functionto explicitly convert a value to a number
e.g. let num = number(str)
Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered
If a string is not a valid number, the result of such a conversionis NaN
e.g. let age = number("an Arbitrary string instead of a number");
alert(age);
  Numeric conversion rules:
Value                  Becomes
-Undefined             NaN
-Null                  0
-True or False         1 and 0
-String                white space removed

-> Boolean Conversion
It happens in logical operations, but can also be perfomed explicitly with a call to boolean(value)
The converion rule: 
  >Values that are intuitively "empty" like 0, an empty string, null, undefined and Nan become false
  Other values become true

-> Formatting numbers
JS number format: main tips
> Several JS number format methods are offered with this language that you can use to manipulate numeric values.
> Each number method returns a new value instead of changing the one being used for the method.
> Every JS number format method may be used on any type of number including literals, variables, expressions.
 ->These are the go-to methods while working with numeric values:
  >number(); Return number converted from its argument
  >parseFloat(); Parse its argument and return a float
  >parseInt(); Parse its argument and return an integer
  >toString(); Return number as string
  >toExponential(); Return string with numberrounded and written with exponential notations.
  >toFixed(); Return string with rounded and written using a specified number of decimals
  >toPrecision(); Return string with a number written with a specified length.
  >valueOf(); Return number as a number

-> #The Document Object Model and JavaScript Syntax
The Document Object Model is an Application Programming Interface(API) for HTML and XML documents. it does two things for web developers
 > Provides a structural representation of the document.
 > Defines the way that the structure is to be accessed from script
The JS syntax has to do with objects, to access an object, property or method.
its reference must include every object that contains it, separated by a dot. This is called the "dot syntax"

-> Object
  > A JS Object is any scriptable HTML element, that is, any HTML element within a document that may be accessed through the JS language.
  > Outside the context of a web page are core ojects. These objects are not associated with HTML elements, but with the language itself
    then there are home made objects. core objects and home made objects are both associated with the JS object model.
  > The following are some of the JS Objects:
    - window
    - document
    - form
    - image
-> Property
 > Objects have properties, which you can think of as characteristics of an object. 
   A JS property has a similar relationship to the object it belogs to that an HTML tag attribute has to the tag that it contains it.
 > There is one major exception: JS properties can also be objects. the object-property relationship is more like the relationship an <option>
    tag has to the <select> tagthat contains it, but in JS, Theres is no difference in how you prefer to a plain old property and a 
    property that is also an object.
 > A document, although contained by the window and therefore a property of the window object, is also considered an object. The same is true for a form and
   an image, they are properties of the document object but also properties themselves. The rule for the dual properties is this: a property is also an object
   if that property has its own properties and methods. it is best to think of objects with properties as objects.
 
-> Method 
 > Methods are actions that can be applied directly to objects. methods cause a boring old HTML document to react to the end-user. This results in a 
   meaningful experience for the end-user otherwise would be completely one-sided.
-> Method parameters 
 > Methods are signified by parenthesis immediately following their name e.g. alert(); These parenthesis sometimes hold values called parameters, which are 
   required by some methods.
 > A parameter is simply information needed by a method to perform its task. for instance, the alert() method pops up an alert box without a parameter, the 
   alert method will generate a dialog box alert(), which is meaningless. But with a parameter, the alert method will generate a dialog box alert("Hello World")
   which communicates a massasge to the end user.
 -> Here are a few Javascript methods
    - alert() causes an alert dialog box to appear over the pages that launched it.
    - write() writes content to a page
    - focus() causes the mouse cursor to be inserted into a form element

 -> Core APIs in the DOM 
   > Document and Window objects are the objects whhose interfaces you generally use most often in DOM programming. The window object represents something like
    the browser and the document object is the root of the document itself. Elements inherits from the generic node interface and together these two interface
    provide many of the methods and properties you use on individual elements.
  > The following is a brief list of common APIs in web and XML page scripting using the DOM
    - document.getElementById(id)
    - document.getElementsByTagName(name)
    - document.createElement(name)
    - parentNode.appendChild(node)
    - element.innerHTML
    - element.style.left
    - element.setAttribute
    - element.getAttribute
    - element.addEventListner
    - window._content
    - window.onload
    - window.dump()
    - window.scrollTo()

-> # Functions
   > A Funtion is a subprogram designed to perform a particular task. A function will only execute if and only when it has been called. Values can be passed
     into functions and used within that function as well. All funtions have a return value, otherwise they become undefined. A function is an object(HTML element
     with properties and methods)
  -> A function declaration is as follows
       function name(parameters){//statements}

 -> Calling one function from another function
   > Code inside a function behaves just like anywhere else. This means you can call one function from inside another function, this allows you to nest functions
     so that you can create separate functions, which each perform a specific task, and then run them together as a complete process.
 
 -> Creating objects with user-defined functions
   > Javascript is based on objects: the window is an object, links are objects, forms are objects, even Netscape itself is an object. Using objects can help
     make programming easier and more streamlined. You can extend the use of objects in Javascript by making your own. the process uses functions in a slightly modified
     way.

 -> Making a new object entails two steps: 
   > Define the object in a user-defined function
   > Use the new keyword to create(or instantiate) the object with a call to the object function.
     e.g. ret = new makeSimpleObject();
          function makeSimpleObject(){}

 -> Defining new properties to already-made objects
   > After an object has been created you can assign a value to it, but instead of just assigning a value to the object itself, you should define a new property 
     for the object, and assign a value to the property. To create a new property and assign a value to it, simply wite a variable expression like this:
     e.g. myObject.property = value
   > myObject is the name of the user-defined object
   > property is the name of the property you want to create
   > Value is the value you want to assign.
